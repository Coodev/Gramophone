package com.orobator.android.gramophone.model.loaders;import android.content.AsyncTaskLoader;import android.content.Context;import android.database.Cursor;/** * SQLiteCursorLoader mimics most of the code in android.content.CursorLoader, * without the requirement of using a ContentProvider. */public abstract class SQLiteCursorLoader extends AsyncTaskLoader<Cursor> {    private Cursor mCursor;    public SQLiteCursorLoader(Context context) {        super(context);    }    @Override    public void onCanceled(Cursor cursor) {        if (cursor != null && !cursor.isClosed()) {            cursor.close();        }    }    @Override    public Cursor loadInBackground() {        Cursor cursor = loadCursor();        if (cursor != null) {            // Ensures data is available in memory when returned to main thread            cursor.getCount();        }        return cursor;    }    protected abstract Cursor loadCursor();    @Override    public void deliverResult(Cursor data) {        Cursor oldCursor = mCursor;        mCursor = data;        if (isStarted()) {            // Data can be delivered            super.deliverResult(data);        }        if (oldCursor != null && oldCursor != data && !oldCursor.isClosed()) {            oldCursor.close();        }    }    @Override    protected void onStartLoading() {        if (mCursor != null) {            deliverResult(mCursor);        }        if (takeContentChanged() || mCursor == null) {            forceLoad();        }    }    @Override    protected void onStopLoading() {        // Attempt to cancel the current load task if possible        cancelLoad();    }    @Override    protected void onReset() {        super.onReset();        // Ensure the loader is stopped        onStopLoading();        if (mCursor != null && !mCursor.isClosed()) {            mCursor.close();        }        mCursor = null;    }}