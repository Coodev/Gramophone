package com.orobator.android.gramophone.view.adapters;import android.app.Fragment;import android.app.FragmentManager;import android.content.Context;import android.database.Cursor;import android.os.Bundle;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.CursorAdapter;import android.widget.ImageButton;import android.widget.SectionIndexer;import android.widget.TextView;import android.widget.Toast;import com.fortysevendeg.android.swipelistview.SwipeListView;import com.orobator.android.gramophone.R;import com.orobator.android.gramophone.model.Album;import com.orobator.android.gramophone.model.Song;import com.orobator.android.gramophone.model.SongDatabaseHelper;import com.orobator.android.gramophone.view.fragments.AlbumSongsFragment;import com.orobator.android.gramophone.view.fragments.ArtistsAlbumsFragment;import java.util.ArrayList;import java.util.HashMap;import java.util.Vector;public class SongCursorAdapter extends CursorAdapter implements SectionIndexer {    private static final String TAG = "SongCursorAdapter";    private Vector<String> mSections;    private HashMap<String, Integer> sectionMap;    private SongDatabaseHelper.SongCursor mSongCursor;    private ArrayList<Song> mSongs;    private Context mContext;    private Fragment mFragment;    public SongCursorAdapter(Context context, SongDatabaseHelper.SongCursor cursor, Fragment fragment) {        super(context, cursor, 0);        mContext = context;        mSongCursor = cursor;        mSections = new Vector<String>();        sectionMap = new HashMap<String, Integer>();        mSongs = new ArrayList<Song>();        mFragment = fragment;        initializeSections();    }    /**     * Creates the sections for the SectionIndexer to use     */    private void initializeSections() {        mSongCursor.moveToFirst();        while (!mSongCursor.isAfterLast()) {            mSongs.add(mSongCursor.getSong());            String title = mSongCursor.getSong().getTitle();            String firstLetter = title.substring(0, 1).toUpperCase();            Integer myInt = Integer.getInteger(firstLetter);            if (myInt != null) {                firstLetter = "123";            }            if (!sectionMap.containsKey(firstLetter)) {                if (startsWithAlphaNum(firstLetter)) {                    sectionMap.put(firstLetter, mSongCursor.getPosition());                    mSections.add(firstLetter);                }            }            mSongCursor.moveToNext();        }    }    private boolean startsWithAlphaNum(String str) {        if (str == null) return false;        // TODO Clean up code with REGEX        return !(str.toLowerCase().startsWith("~")                || str.toLowerCase().startsWith("!")                || str.toLowerCase().startsWith("@")                || str.toLowerCase().startsWith("#")                || str.toLowerCase().startsWith("$")                || str.toLowerCase().startsWith("%")                || str.toLowerCase().startsWith("^")                || str.toLowerCase().startsWith("&")                || str.toLowerCase().startsWith("*")                || str.toLowerCase().startsWith("(")                || str.toLowerCase().startsWith(")")                || str.toLowerCase().startsWith("_")                || str.toLowerCase().startsWith("-")                || str.toLowerCase().startsWith("+")                || str.toLowerCase().startsWith("=")                || str.toLowerCase().startsWith("`")                || str.toLowerCase().startsWith("[")                || str.toLowerCase().startsWith("]")                || str.toLowerCase().startsWith("{")                || str.toLowerCase().startsWith("}")                || str.toLowerCase().startsWith("\\")                || str.toLowerCase().startsWith("|")                || str.toLowerCase().startsWith(":")                || str.toLowerCase().startsWith(";")                || str.toLowerCase().startsWith("'")                || str.toLowerCase().startsWith("\"")                || str.toLowerCase().startsWith("<")                || str.toLowerCase().startsWith(">")                || str.toLowerCase().startsWith(",")                || str.toLowerCase().startsWith(".")                || str.toLowerCase().startsWith("?")                || str.toLowerCase().startsWith("/"));    }    @Override    public Object getItem(int position) {        return mSongs.get(position);    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        final Song song = mSongs.get(position);        ViewHolder holder;        if (convertView == null) {            LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);            convertView = inflater.inflate(R.layout.list_item_song, null);            holder = new ViewHolder();            holder.titleTextView = (TextView) convertView.findViewById(R.id.songTitle_TextView);            holder.artistTextView = (TextView) convertView.findViewById(R.id.songArtist_TextView);            holder.playNextImageButton = (ImageButton) convertView.findViewById(R.id.playNext_imageButton);            holder.addToQueueImageButton = (ImageButton) convertView.findViewById(R.id.addToQueue_imageButton);            holder.artistImageButton = (ImageButton) convertView.findViewById(R.id.goToArtist_imageButon);            holder.albumImageButton = (ImageButton) convertView.findViewById(R.id.goToAlbum_imageButton);            holder.moreImageButton = (ImageButton) convertView.findViewById(R.id.viewMore_imageButton);            convertView.setTag(holder);        } else {            holder = (ViewHolder) convertView.getTag();        }        ((SwipeListView) parent).recycle(convertView, position);        holder.titleTextView.setText(song.getTitle());        holder.artistTextView.setText(song.getArtist());        holder.playNextImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast toast = Toast.makeText(mContext, "Play next " + song.getTitle() + " - " + song.getArtist(), Toast.LENGTH_SHORT);                toast.show();            }        });        holder.addToQueueImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast toast = Toast.makeText(mContext, "Add to Queue " + song.getTitle() + " - " + song.getArtist(), Toast.LENGTH_SHORT);                toast.show();            }        });        holder.artistImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String artist = song.getArtist();                Bundle args = new Bundle();                args.putString(Album.KEY_ALBUM_ARTIST, artist);                ArtistsAlbumsFragment fragment = new ArtistsAlbumsFragment();                fragment.setArguments(args);                FragmentManager fm = mFragment.getFragmentManager();                fm.beginTransaction()                        .replace(R.id.content_frame, fragment)                        .addToBackStack(artist)                        .commit();            }        });        holder.albumImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Album album = new Album(song.getAlbum(), song.getAlbumArtist());                Bundle args = new Bundle();                args.putString(Album.KEY_ALBUM_NAME, album.getAlbumName());                args.putString(Album.KEY_ALBUM_ARTIST, album.getAlbumArtist());                AlbumSongsFragment albumSongsFragment = new AlbumSongsFragment();                albumSongsFragment.setArguments(args);                FragmentManager fm = mFragment.getActivity().getFragmentManager();                fm.beginTransaction()                        .replace(R.id.content_frame, albumSongsFragment)                        .addToBackStack(album.getAlbumName())                        .commit();            }        });        holder.moreImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast toast = Toast.makeText(mContext, "MOAR " + song.getTitle() + " - " + song.getArtist(), Toast.LENGTH_SHORT);                toast.show();            }        });        return convertView;    }    @Override    public View newView(Context context, Cursor cursor, ViewGroup parent) {        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        View view = inflater.inflate(R.layout.list_item_song, parent, false);        return view;    }    @Override    public void bindView(View view, Context context, Cursor cursor) {        final Song song = mSongCursor.getSong();        ViewHolder holder = new ViewHolder();        holder.titleTextView = (TextView) view.findViewById(R.id.songTitle_TextView);        holder.artistTextView = (TextView) view.findViewById(R.id.songArtist_TextView);        holder.playNextImageButton = (ImageButton) view.findViewById(R.id.playNext_imageButton);        holder.addToQueueImageButton = (ImageButton) view.findViewById(R.id.addToQueue_imageButton);        holder.artistImageButton = (ImageButton) view.findViewById(R.id.goToArtist_imageButon);        holder.albumImageButton = (ImageButton) view.findViewById(R.id.goToAlbum_imageButton);        holder.moreImageButton = (ImageButton) view.findViewById(R.id.viewMore_imageButton);        view.setTag(holder);        holder.titleTextView.setText(song.getTitle());        holder.artistTextView.setText(song.getArtist());        holder.playNextImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast toast = Toast.makeText(mContext, "Play next " + song.getTitle() + " - " + song.getArtist(), Toast.LENGTH_SHORT);                toast.show();            }        });        holder.addToQueueImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast toast = Toast.makeText(mContext, "Add to Queue " + song.getTitle() + " - " + song.getArtist(), Toast.LENGTH_SHORT);                toast.show();            }        });        holder.artistImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                String artist = song.getArtist();                Bundle args = new Bundle();                args.putString(Album.KEY_ALBUM_ARTIST, artist);                ArtistsAlbumsFragment fragment = new ArtistsAlbumsFragment();                fragment.setArguments(args);                FragmentManager fm = mFragment.getFragmentManager();                fm.beginTransaction()                        .replace(R.id.content_frame, fragment)                        .addToBackStack(artist)                        .commit();            }        });        holder.albumImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Album album = new Album(song.getAlbum(), song.getAlbumArtist());                Bundle args = new Bundle();                args.putString(Album.KEY_ALBUM_NAME, album.getAlbumName());                args.putString(Album.KEY_ALBUM_ARTIST, album.getAlbumArtist());                AlbumSongsFragment albumSongsFragment = new AlbumSongsFragment();                albumSongsFragment.setArguments(args);                FragmentManager fm = mFragment.getActivity().getFragmentManager();                fm.beginTransaction()                        .replace(R.id.content_frame, albumSongsFragment)                        .addToBackStack(album.getAlbumName())                        .commit();            }        });        holder.moreImageButton.setOnClickListener(new View.OnClickListener() {            @Override            public void onClick(View v) {                Toast toast = Toast.makeText(mContext, "MOAR " + song.getTitle() + " - " + song.getArtist(), Toast.LENGTH_SHORT);                toast.show();            }        });    }    public int getSize() {        return mSongCursor.getCount();    }    @Override    public Object[] getSections() {        return mSections.toArray();    }    @Override    public int getPositionForSection(int sectionIndex) {        return sectionMap.get(mSections.get(sectionIndex));    }    @Override    public int getSectionForPosition(int position) {        Song song = mSongs.get(position);        String title = song.getTitle();        String firstLetter = title.substring(0, 1).toUpperCase();        for (int i = 0; i < mSections.size(); i++) {            if (firstLetter.equals(mSections.get(i))) {                return i;            }        }        return 0;    }    /**     * ViewHolder is a class to cache calls to findViewById() for performance     * increases     */    static class ViewHolder {        TextView titleTextView;        TextView artistTextView;        ImageButton playNextImageButton;        ImageButton addToQueueImageButton;        ImageButton albumImageButton;        ImageButton artistImageButton;        ImageButton moreImageButton;    }}