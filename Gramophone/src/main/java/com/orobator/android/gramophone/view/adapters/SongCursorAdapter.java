package com.orobator.android.gramophone.view.adapters;import android.content.Context;import android.database.Cursor;import android.support.v4.app.Fragment;import android.support.v4.widget.CursorAdapter;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.SectionIndexer;import android.widget.TextView;import com.orobator.android.gramophone.R;import com.orobator.android.gramophone.model.Song;import com.orobator.android.gramophone.model.SongDatabaseHelper;import java.util.ArrayList;import java.util.HashMap;import java.util.Vector;public class SongCursorAdapter extends CursorAdapter implements SectionIndexer {    private static final String TAG = "SongCursorAdapter";    public static final String KEY_SONG = "song";    protected static final int VIEW_TYPE_NO_ALBUM_ART = 0;    protected static final int VIEW_TYPE_NO_ARTIST_OR_TITLE = 1;    protected static final int VIEW_TYPE_HAS_ALBUM_ART = 2;    protected static final int VIEW_TYPE_COUNT = VIEW_TYPE_HAS_ALBUM_ART + 1;    private ArrayList<Song> mSongs;    private Vector<String> mSections;    private HashMap<String, Integer> sectionMap;    private Fragment mFragment;    private SongDatabaseHelper.SongCursor mSongCursor;    public SongCursorAdapter(Context context, SongDatabaseHelper.SongCursor cursor) {        super(context, cursor, 0);        mSongCursor = cursor;//        mSongs = songs;//        mFragment = fragment;        mSections = new Vector<String>();        sectionMap = new HashMap<String, Integer>();        initializeSections();    }    @Override    public View newView(Context context, Cursor cursor, ViewGroup parent) {        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        return inflater.inflate(R.layout.list_item_no_album_art, parent, false);    }    @Override    public void bindView(View view, Context context, Cursor cursor) {        Song song = mSongCursor.getSong();        TextView songTitleTextView = (TextView) view.findViewById(R.id.songTitle_TextView);        TextView songArtistTextView = (TextView) view.findViewById(R.id.songArtist_TextView);        songTitleTextView.setText(song.getTitle());        songArtistTextView.setText(song.getArtist());    }    private void initializeSections() {        Log.d(TAG, "Initializing sections");        mSongCursor.moveToFirst();        while (!mSongCursor.isAfterLast()) {            String title = mSongCursor.getSong().getTitle();            String firstLetter = title.substring(0, 1).toUpperCase();            Integer myInt = Integer.getInteger(firstLetter);            if (myInt != null) {                firstLetter = "123";            }            if (!sectionMap.containsKey(firstLetter)) {                if (startsWithAlphaNum(firstLetter)) {                    sectionMap.put(firstLetter, mSongCursor.getPosition());                    mSections.add(firstLetter);                }            }            Log.d(TAG, "Looked at song " + mSongCursor.getPosition());            mSongCursor.moveToNext();        }    }    private boolean startsWithAlphaNum(String str) {        if (str == null) return false;        // TODO Clean up code with REGEX        return !(str.toLowerCase().startsWith("~")                || str.toLowerCase().startsWith("!")                || str.toLowerCase().startsWith("@")                || str.toLowerCase().startsWith("#")                || str.toLowerCase().startsWith("$")                || str.toLowerCase().startsWith("%")                || str.toLowerCase().startsWith("^")                || str.toLowerCase().startsWith("&")                || str.toLowerCase().startsWith("*")                || str.toLowerCase().startsWith("(")                || str.toLowerCase().startsWith(")")                || str.toLowerCase().startsWith("_")                || str.toLowerCase().startsWith("-")                || str.toLowerCase().startsWith("+")                || str.toLowerCase().startsWith("=")                || str.toLowerCase().startsWith("`")                || str.toLowerCase().startsWith("[")                || str.toLowerCase().startsWith("]")                || str.toLowerCase().startsWith("{")                || str.toLowerCase().startsWith("}")                || str.toLowerCase().startsWith("\\")                || str.toLowerCase().startsWith("|")                || str.toLowerCase().startsWith(":")                || str.toLowerCase().startsWith(";")                || str.toLowerCase().startsWith("'")                || str.toLowerCase().startsWith("\"")                || str.toLowerCase().startsWith("<")                || str.toLowerCase().startsWith(">")                || str.toLowerCase().startsWith(",")                || str.toLowerCase().startsWith(".")                || str.toLowerCase().startsWith("?")                || str.toLowerCase().startsWith("/"));    }//    public int getSize() {//        return mSongs.size();//    }//    @Override//    public View getView(int position, View convertView, ViewGroup parent) {//        Song song = getItem(position);////        int type = getItemViewType(position);////        switch (type) {//            case VIEW_TYPE_HAS_ALBUM_ART://            case VIEW_TYPE_NO_ALBUM_ART://                if (convertView == null) {//                    convertView = mFragment.getActivity().getLayoutInflater()//                            .inflate(R.layout.list_item_no_album_art, null);//                    NoAlbumArtViewHolder holder = new NoAlbumArtViewHolder();//                    holder.songTitleTextView = (TextView) convertView.findViewById(R.id.songTitle_TextView);//                    holder.songArtistTextView = (TextView) convertView.findViewById(R.id.songArtist_TextView);//                    convertView.setTag(holder);//                }////                NoAlbumArtViewHolder holder = (NoAlbumArtViewHolder) convertView.getTag();//                holder.songTitleTextView.setText(song.getTitle());//                holder.songArtistTextView.setText(song.getArtist());//                break;////            case VIEW_TYPE_NO_ARTIST_OR_TITLE://                if (convertView == null) { // if we weren't given a view, inflate one//                    convertView = mFragment.getActivity().getLayoutInflater().inflate(R.layout.list_item_no_title_or_artist, null);//                    NoArtistOrTitleViewHolder holder1 = new NoArtistOrTitleViewHolder();//                    holder1.fileName = (TextView) convertView.findViewById(R.id.fileName_TextView);//                    convertView.setTag(holder1);//                }////                NoArtistOrTitleViewHolder holder1 = (NoArtistOrTitleViewHolder) convertView.getTag();//                holder1.fileName.setText(song.getFileName());//                break;//        }////        return convertView;//    }//    @Override//    public int getItemViewType(int position) {//        Song song = getItem(position);////        if (song.getArtist() == null || song.getTitle() == null) {//            return VIEW_TYPE_NO_ARTIST_OR_TITLE;//        }////        if (song.hasArtwork()) {//            return VIEW_TYPE_HAS_ALBUM_ART;//        } else {//            return VIEW_TYPE_NO_ALBUM_ART;//        }//    }////    @Override//    public int getViewTypeCount() {//        return VIEW_TYPE_COUNT;//    }    @Override    public Object[] getSections() {        return mSections.toArray();    }    @Override    public int getPositionForSection(int sectionIndex) {        return sectionMap.get(mSections.get(sectionIndex));    }    @Override    public int getSectionForPosition(int position) {        mSongCursor.moveToPosition(position);        Song song = mSongCursor.getSong();        String title = song.getTitle();        String firstLetter = title.substring(0, 1).toUpperCase();        for (int i = 0; i < mSections.size(); i++) {            if (firstLetter.equals(mSections.get(i))) {                return i;            }        }        return 0;    }//    static class NoAlbumArtViewHolder {//        TextView songTitleTextView;//        TextView songArtistTextView;//    }////    static class NoArtistOrTitleViewHolder {//        TextView fileName;//    }}