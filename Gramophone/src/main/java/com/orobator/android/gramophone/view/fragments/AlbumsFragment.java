package com.orobator.android.gramophone.view.fragments;import android.app.ListFragment;import android.app.LoaderManager;import android.content.Loader;import android.database.Cursor;import android.os.Bundle;import android.view.ActionMode;import android.view.LayoutInflater;import android.view.Menu;import android.view.MenuInflater;import android.view.MenuItem;import android.view.View;import android.view.ViewGroup;import android.widget.AbsListView;import android.widget.CursorAdapter;import android.widget.ListView;import android.widget.Toast;import com.orobator.android.gramophone.R;import com.orobator.android.gramophone.controller.listeners.AlbumClickListener;import com.orobator.android.gramophone.model.SongDatabaseHelper.AlbumCursor;import com.orobator.android.gramophone.model.loaders.AlbumCursorLoader;import com.orobator.android.gramophone.view.adapters.AlbumCursorAdapter;/** * Fragment used to display all of the albums on the device */public class AlbumsFragment extends ListFragment implements LoaderManager.LoaderCallbacks<Cursor> {    private static final String TAG = "AlbumsFragment";    @Override    public Loader<Cursor> onCreateLoader(int id, Bundle args) {        return new AlbumCursorLoader(getActivity(), id, args);    }    @Override    public void onLoadFinished(Loader<Cursor> loader, Cursor cursor) {        AlbumCursor albumCursor = (AlbumCursor) cursor;        AlbumCursorAdapter mAdapter = new AlbumCursorAdapter(getActivity().getApplicationContext(), albumCursor);        setListAdapter(mAdapter);        AlbumClickListener clickListener = new AlbumClickListener(mAdapter, this);        ListView listView = getListView();        listView.setOnItemClickListener(clickListener);        listView.setOnItemLongClickListener(clickListener);        listView.setMultiChoiceModeListener(new AbsListView.MultiChoiceModeListener() {            @Override            public void onItemCheckedStateChanged(ActionMode mode, int position, long id, boolean checked) {                // Here you can do something when items are selected/de-selected,                // such as update the title in the CAB                // TODO update title to reflect selection count                // TODO create data structure to manage what has been selected            }            @Override            public boolean onCreateActionMode(ActionMode mode, Menu menu) {                MenuInflater inflater = mode.getMenuInflater();                inflater.inflate(R.menu.song_context_menu, menu);                return true;            }            @Override            public boolean onPrepareActionMode(ActionMode mode, Menu menu) {                // Here you can perform updates to the CAB due to                // an invalidate() request                return false;            }            @Override            public boolean onActionItemClicked(ActionMode mode, MenuItem item) {                switch (item.getItemId()) {                    case R.id.action_delete:                        // deleteSelectedItems();                        Toast.makeText(getActivity(), "Delete from MultiChoiceModeListener", Toast.LENGTH_LONG).show();                        mode.finish(); // Action picked, so close the CAB                        return true;                    default:                        return false;                }            }            @Override            public void onDestroyActionMode(ActionMode mode) {                // Here you can make any necessary updates to the activity when                // the CAB is removed. By default, selected items are deselected/unchecked.            }        });    }    @Override    public void onLoaderReset(Loader<Cursor> loader) {        setListAdapter(null);    }    @Override    public void onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setRetainInstance(true);        getLoaderManager().initLoader(AlbumCursorLoader.ALL_ALBUMS_ID, null, this);    }    @Override    public void onDestroy() {        CursorAdapter cursorAdapter = (CursorAdapter) getListAdapter();        Cursor cursor = cursorAdapter.getCursor();        if (cursor != null) {            cursor.close();        }        super.onDestroy();    }    @Override    public View onCreateView(LayoutInflater inflater, ViewGroup parent, Bundle savedInstanceState) {        return inflater.inflate(R.layout.list_view_albums, parent, false);    }}