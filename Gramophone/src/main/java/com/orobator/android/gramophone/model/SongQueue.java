package com.orobator.android.gramophone.model;import android.content.Context;import android.os.Bundle;import java.util.ArrayList;/** * The SongQueue class represents the globally accessible music queue. This * queue is similar to a double ended queue because additions can be made to the * front. However, it is also different from a double ended queue because the * internal order of the queue can be modified and members of the queue can get * skipped. */public class SongQueue {    static ArrayList<Song> upcomingSongs;    static ArrayList<Long> songHistory;    static SongDatabaseHelper.SongCursor sSongCursor;    static Context sContext;    private static int currentSong;    private SongQueue() {        // Private constructor that prevents instantiation of the class    }    /**     * initializeQueue(...) creates a new queue     *     * @param firstSong      The first song to be played     * @param shuffle        Whether or not the queue should be shuffled     * @param collectionType The collection type of the queue being initialized     * @param collectionInfo Describes the collection     */    public static void initializeQueue(Song firstSong, boolean shuffle,                                       String collectionType, Context context,                                       Bundle collectionInfo) {        // Add first to song history        if (songHistory == null) {            songHistory = new ArrayList<Long>();        }        songHistory.add(firstSong.getSongID());        // Get the cursor for the songs TODO implement shuffling        sContext = context.getApplicationContext();        SongDatabaseHelper helper = new SongDatabaseHelper(sContext);        switch (collectionType) {            case Song.KEY_COLLECTION_TYPE_ALL:                sSongCursor = helper.querySongs();                break;            case Song.KEY_ALBUM:                Album album = (Album) collectionInfo.getSerializable(Song.KEY_ALBUM);                sSongCursor = helper.querySongsForAlbum(album);                break;            case Song.KEY_ARTIST:                String artist = collectionInfo.getString(Song.KEY_ARTIST);                sSongCursor = helper.querySongsForArtist(artist);                break;            case Song.KEY_GENRE:                String genre = collectionInfo.getString(Song.KEY_GENRE);                sSongCursor = helper.querySongsForGenre(genre);                break;            default:                sSongCursor = null; // Should never happen        }        if (upcomingSongs == null) {            upcomingSongs = new ArrayList<Song>();        }        upcomingSongs.clear();        // Populate the queue        sSongCursor.moveToFirst();        while (!sSongCursor.isAfterLast()) {            upcomingSongs.add(sSongCursor.getSong());            sSongCursor.moveToNext();        }        currentSong = 0;    }    /**     * Returns the next song that will be played     */    public static Song getNextSong() {        // TODO add song to history        currentSong++;        return upcomingSongs.get(currentSong);    }    /**     * moveToNext(songId) moves the song with id songId into the position of the     * queue where it will be played next.     */    public static void moveToNext(Song song) {        moveToPosition(song, 0);        // TODO edit metadata    }    /**     * moveToPosition(songId, position) moves the song  into the position'th     * place in the queue. Requires the song to already be in the queue     *     * @return the new representation of the queue     */    public static ArrayList<Song> moveToPosition(Song song, int position) {        int songIndex = upcomingSongs.indexOf(song);        upcomingSongs.remove(songIndex);        upcomingSongs.add(position, song);        return upcomingSongs;    }    /**     * removeFromQueue removes the song with id songId from the queue     */    public static void removeFromQueue(long songId) {        // TODO implement this, update metadata    }    /**     * enqueue adds a song with id songId to the back of the queue     */    public static void enqueue(long songId) {        // TODO implement this, update metadata    }    /**     * Adds all songs by the artist to the queue.     */    public static void enqueueArtist(String artist) {        // TODO implement this    }    /**     * Adds all songs in the album to the queue.     */    public static void enqueueAlbum(Album album) {        // TODO: implement this    }    /**     * Adds all songs in the genre to the queue.     */    public static void enqueueGenre(String genre) {        // TODO: implement this    }    /**     * skipToPosition(position) makes position the first place in the queue and     * discards all others before it.     */    public static void skipToPosition(int position) {        // TODO implement this    }}