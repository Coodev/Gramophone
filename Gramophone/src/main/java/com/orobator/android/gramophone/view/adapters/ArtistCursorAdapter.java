package com.orobator.android.gramophone.view.adapters;import android.content.Context;import android.database.Cursor;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.CursorAdapter;import android.widget.SectionIndexer;import android.widget.TextView;import com.orobator.android.gramophone.R;import com.orobator.android.gramophone.model.SongDatabaseHelper.ArtistCursor;import java.util.ArrayList;import java.util.HashMap;import java.util.Vector;public class ArtistCursorAdapter extends CursorAdapter implements SectionIndexer {    private Vector<String> mSections;    private HashMap<String, Integer> sectionMap;    private Context mContext;    private ArrayList<String> mArtists;    private ArtistCursor mArtistCursor;    public ArtistCursorAdapter(Context context, ArtistCursor cursor) {        super(context, cursor, 0);        mContext = context;        mArtistCursor = cursor;        mSections = new Vector<String>();        sectionMap = new HashMap<String, Integer>();        mArtists = new ArrayList<String>();        initializeSections();    }    /**     * Creates the sections for the SectionIndexer to use     */    private void initializeSections() {        mArtistCursor.moveToFirst();        while (!mArtistCursor.isAfterLast()) {            mArtists.add(mArtistCursor.getArtist());            String title = mArtistCursor.getArtist();            String firstLetter = title.substring(0, 1).toUpperCase();            Integer myInt = Integer.getInteger(firstLetter);            if (myInt != null) {                firstLetter = "123";            }            if (!sectionMap.containsKey(firstLetter)) {                if (startsWithAlphaNum(firstLetter)) {                    sectionMap.put(firstLetter, mArtistCursor.getPosition());                    mSections.add(firstLetter);                }            }            mArtistCursor.moveToNext();        }    }    private boolean startsWithAlphaNum(String str) {        if (str == null) return false;        // TODO Clean up code with REGEX        return !(str.toLowerCase().startsWith("~")                || str.toLowerCase().startsWith("!")                || str.toLowerCase().startsWith("@")                || str.toLowerCase().startsWith("#")                || str.toLowerCase().startsWith("$")                || str.toLowerCase().startsWith("%")                || str.toLowerCase().startsWith("^")                || str.toLowerCase().startsWith("&")                || str.toLowerCase().startsWith("*")                || str.toLowerCase().startsWith("(")                || str.toLowerCase().startsWith(")")                || str.toLowerCase().startsWith("_")                || str.toLowerCase().startsWith("-")                || str.toLowerCase().startsWith("+")                || str.toLowerCase().startsWith("=")                || str.toLowerCase().startsWith("`")                || str.toLowerCase().startsWith("[")                || str.toLowerCase().startsWith("]")                || str.toLowerCase().startsWith("{")                || str.toLowerCase().startsWith("}")                || str.toLowerCase().startsWith("\\")                || str.toLowerCase().startsWith("|")                || str.toLowerCase().startsWith(":")                || str.toLowerCase().startsWith(";")                || str.toLowerCase().startsWith("'")                || str.toLowerCase().startsWith("\"")                || str.toLowerCase().startsWith("<")                || str.toLowerCase().startsWith(">")                || str.toLowerCase().startsWith(",")                || str.toLowerCase().startsWith(".")                || str.toLowerCase().startsWith("?")                || str.toLowerCase().startsWith("/"));    }    @Override    public Object[] getSections() {        return mSections.toArray();    }    @Override    public int getPositionForSection(int section) {        return sectionMap.get(mSections.get(section));    }    @Override    public Object getItem(int position) {        return mArtists.get(position);    }    @Override    public int getSectionForPosition(int position) {        String title = mArtists.get(position);        String firstLetter = title.substring(0, 1);        for (int i = 0; i < mSections.size(); i++) {            if (firstLetter.equals(mSections.get(i))) {                return i;            }        }        return 0;    }    /**     * ViewHolder is a class to cache calls to findViewById() for performance     * increases     */    public static class ViewHolder {        TextView artistNameTextView;    }    @Override    public View getView(int position, View convertView, ViewGroup parent) {        String artist = (String) getItem(position);        if (convertView == null) {            LayoutInflater inflater = (LayoutInflater) mContext.getSystemService(Context.LAYOUT_INFLATER_SERVICE);            convertView = inflater.inflate(R.layout.list_item_artist, null);            ViewHolder holder = new ViewHolder();            holder.artistNameTextView = (TextView) convertView.findViewById(R.id.artistName_textView);            convertView.setTag(holder);        }        ViewHolder holder = (ViewHolder) convertView.getTag();        holder.artistNameTextView.setText(artist);        return convertView;    }    @Override    public View newView(Context context, Cursor cursor, ViewGroup parent) {        LayoutInflater inflater = (LayoutInflater) context.getSystemService(Context.LAYOUT_INFLATER_SERVICE);        return inflater.inflate(R.layout.list_item_artist, parent, false);    }    @Override    public void bindView(View view, Context context, Cursor cursor) {        String artist = mArtistCursor.getArtist();        TextView artistTextView = (TextView) view.findViewById(R.id.artistName_textView);        artistTextView.setText(artist);    }}